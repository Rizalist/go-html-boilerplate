// Code generated by go-bindata.
// sources:
// templates/index.html
// static/style.css
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x91\x4f\x8f\xdb\x20\x14\xc4\xef\xfb\x29\xde\x72\x2e\x41\xb9\x55\x15\x58\xaa\xaa\xaa\x5b\xa9\xbd\x6d\xff\x5c\x31\x4c\xc2\x53\xb0\x71\xe1\xd9\x51\xbe\x7d\x95\xe0\x4a\xdb\xd3\x03\x66\x18\x7e\x1a\xec\x73\x2c\x41\x6e\x0b\x28\xc9\x94\x87\x27\xdb\x07\x91\x4d\xf0\xf1\xbe\x20\xb2\x13\xc4\x53\x48\xbe\x36\x88\x53\xab\x9c\xf4\x7b\xf5\x56\x4a\x22\x8b\xc6\x9f\x95\x37\xa7\x7e\xeb\x1f\x1f\xf5\xa7\x32\x2d\x5e\x78\xcc\x50\x14\xca\x2c\x98\xc5\xa9\xaf\x9f\x1d\xe2\x19\xff\xdd\x9c\xfd\x04\xa7\x36\xc6\x75\x29\x55\xde\x98\xaf\x1c\x25\xb9\x88\x8d\x03\xf4\x63\xf3\x8e\x78\x66\x61\x9f\x75\x0b\x3e\xc3\x1d\xd5\xf0\xd4\x93\x84\x25\x63\xf8\x52\xe8\xe5\xf5\xfb\x37\x7a\xc5\xb4\x64\x2f\xb0\xa6\x9f\x77\x4f\xe6\xf9\x42\x15\xd9\xa9\x26\xb7\x8c\x96\x00\x51\x94\x2a\x4e\x4e\x99\x26\x5e\x38\x98\x87\x72\x08\xad\x3d\x10\xad\xf9\xd7\x80\x1d\x4b\xbc\xed\x39\xe9\x38\xbc\x20\xe7\x42\xbf\x4a\xcd\xf1\xd9\x9a\x74\xdc\x95\xa5\x4f\x22\xeb\xf7\xdc\x7b\x2d\xed\x83\x31\x67\x96\xb4\x8e\x87\x50\x26\x73\xc1\xc6\xf3\xb8\xd6\x0b\xcc\xb9\xe8\x7b\xd7\x7a\x2c\x9c\x51\x1f\xc8\x6a\xf8\xc9\xb8\x92\x24\x50\x2b\x6b\x0d\xa0\x50\x22\xe8\x54\x2a\x49\xe2\x46\x0d\x75\x43\x3d\x58\xe3\xf7\x37\xcd\xd2\x49\x3b\xa0\x35\xfd\xf3\xfe\x06\x00\x00\xff\xff\x9a\x6b\x0d\x93\xd4\x01\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticStyleCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc8\x3b\x0e\x02\x21\x10\x06\xe0\x9e\x53\xfc\x07\x80\x04\x2d\xa1\xb2\xf3\x1a\xa3\x80\x4e\xc2\xc3\xc0\xa8\x10\xe3\xdd\xb7\xd8\x6d\xbf\x5b\x0b\x0b\x3f\x05\x00\x85\xa6\xf9\x72\x90\xa7\xc3\xe9\x6c\xed\x6b\xfa\x83\xfb\x83\xab\x83\x05\xbd\xa5\xed\x96\x5a\x15\x93\xa8\x70\x5e\x0e\xd7\x98\x3f\x51\xf8\x4e\x1a\x97\xce\x94\x35\x06\xd5\x61\x46\xec\x9c\xbc\xfa\xab\x2d\x00\x00\xff\xff\x26\xb4\x02\xac\x63\x00\x00\x00")

func staticStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_staticStyleCss,
		"static/style.css",
	)
}

func staticStyleCss() (*asset, error) {
	bytes, err := staticStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/style.css", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.html": templatesIndexHtml,
	"static/style.css": staticStyleCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"style.css": &bintree{staticStyleCss, map[string]*bintree{}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

