// Code generated by go-bindata.
// sources:
// templates/index.html
// static/style.css
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x91\x41\x8f\xdb\x20\x14\x84\xef\xf9\x15\x2f\x9c\x4b\x50\x6e\x55\x05\x96\xaa\xaa\x6a\x2a\xb5\xb7\xb4\xbb\x57\x0c\x93\x80\x82\x8d\x17\x9e\x1d\xe5\xdf\xaf\x12\xbc\x52\xf6\xf4\x80\x19\x86\x4f\x83\xde\xfa\xec\xf8\x36\x81\x02\x0f\xa9\xdb\xe8\x36\x88\x74\x80\xf5\xf7\x05\x91\x1e\xc0\x96\x5c\xb0\xa5\x82\x8d\x98\xf9\x24\xbf\x8a\x67\x29\x30\x4f\x12\x6f\x73\x5c\x8c\x78\x95\xff\xbe\xcb\x1f\x79\x98\x2c\xc7\x3e\x41\x90\xcb\x23\x63\x64\x23\x7e\xff\x34\xf0\x67\x7c\xba\x39\xda\x01\x46\x2c\x11\xd7\x29\x17\x7e\x32\x5f\xa3\xe7\x60\x3c\x96\xe8\x20\x1f\x9b\x2f\x14\xc7\xc8\xd1\x26\x59\x9d\x4d\x30\x7b\xd1\x6d\x5a\x12\x47\x4e\xe8\x7e\x65\x3a\x1c\xff\xfe\xa1\x23\x86\x29\x59\x86\x56\xed\xbc\x79\x52\x1c\x2f\x54\x90\x8c\xa8\x7c\x4b\xa8\x01\x60\x41\xa1\xe0\x64\x84\xaa\x6c\x39\x3a\xf5\x50\x76\xae\xd6\x07\xa2\x56\x1f\x0d\xe8\x3e\xfb\xdb\x9a\x13\xf6\xdd\x01\x29\x65\x7a\xc9\x25\xf9\xad\x56\x61\xbf\x2a\x53\x9b\x44\xda\xae\xb9\xf7\x5a\xea\x37\xa5\xce\x91\xc3\xdc\xef\x5c\x1e\xd4\x05\x4b\x1c\xfb\xb9\x5c\xa0\xce\x59\xde\xbb\x96\xbc\xf2\x8a\xee\x7f\xc4\x95\x38\x80\x6a\x9e\x8b\x03\xb9\xec\x41\xa7\x5c\x88\x43\xac\x54\x51\x16\x94\x9d\x56\x76\x7d\x50\x4d\x0d\xb3\xd1\x69\xd5\x7e\xee\x3d\x00\x00\xff\xff\xbe\x2a\xb2\x70\xd1\x01\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticStyleCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc8\x3b\x0e\x02\x21\x10\x06\xe0\x9e\x53\xfc\x07\x80\x04\x2d\xa1\xb2\xf3\x1a\xa3\x80\x4e\xc2\xc3\xc0\xa8\x10\xe3\xdd\xb7\xd8\x6d\xbf\x5b\x0b\x0b\x3f\x05\x00\x85\xa6\xf9\x72\x90\xa7\xc3\xe9\x6c\xed\x6b\xfa\x83\xfb\x83\xab\x83\x05\xbd\xa5\xed\x96\x5a\x15\x93\xa8\x70\x5e\x0e\xd7\x98\x3f\x51\xf8\x4e\x1a\x97\xce\x94\x35\x06\xd5\x61\x46\xec\x9c\xbc\xfa\xab\x2d\x00\x00\xff\xff\x26\xb4\x02\xac\x63\x00\x00\x00")

func staticStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_staticStyleCss,
		"static/style.css",
	)
}

func staticStyleCss() (*asset, error) {
	bytes, err := staticStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/style.css", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.html": templatesIndexHtml,
	"static/style.css": staticStyleCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"style.css": &bintree{staticStyleCss, map[string]*bintree{}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

